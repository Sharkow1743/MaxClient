name: Build and Release Executables

on:
  release:
    types: [created]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Executable with PyInstaller
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            pyinstaller --name "MaxBridge" --onefile --windowed --noconsole --add-data "web;web" main.py
          else
            pyinstaller --name "MaxBridge" --onefile --windowed --noconsole --add-data "web:web" main.py
          fi
      
      - name: Prepare Artifacts for Release
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            # Для Windows это .exe файл в папке dist
            7z a MaxBridge-windows.zip ./dist/MaxBridge.exe
            echo "ASSET_PATH=MaxBridge-windows.zip" >> $GITHUB_ENV
            echo "ASSET_NAME=MaxBridge-windows-${{ github.event.release.tag_name }}.zip" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            # Для macOS это .app бандл, который лучше упаковать в zip
            # Важно: --noconsole не работает на macOS, используйте --windowed
            zip -r MaxBridge-macos.zip ./dist/MaxBridge.app
            echo "ASSET_PATH=MaxBridge-macos.zip" >> $GITHUB_ENV
            echo "ASSET_NAME=MaxBridge-macos-${{ github.event.release.tag_name }}.zip" >> $GITHUB_ENV
          else
            # Для Linux это просто исполняемый файл
            tar -czvf MaxBridge-linux.tar.gz -C ./dist MaxBridge
            echo "ASSET_PATH=MaxBridge-linux.tar.gz" >> $GITHUB_ENV
            echo "ASSET_NAME=MaxBridge-linux-${{ github.event.release.tag_name }}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Artifact to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}